rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================================
    // ORGANIZATIONS COLLECTION
    // ============================================
    match /organizations/{orgId} {
      // Allow authenticated users to create new organizations
      allow create: if request.auth != null 
        && request.auth.uid == resource.data.createdBy
        && request.auth.uid in resource.data.adminUsers;
      
      // Allow org members to read organization data
      allow read: if request.auth != null 
        && isOrgMember(orgId, request.auth.uid);
      
      // Allow org admins to update organization settings
      allow update: if request.auth != null 
        && isOrgAdmin(orgId, request.auth.uid);
      
      // Allow org admins to delete (though we probably won't use this)
      allow delete: if request.auth != null 
        && isOrgAdmin(orgId, request.auth.uid);

      // ============================================
      // NESTED COLLECTIONS UNDER ORGANIZATIONS
      // ============================================
      
      // USERS subcollection
      match /users/{userId} {
        // Users can read their own profile
        allow read: if request.auth != null 
          && (request.auth.uid == userId || isActiveOrgMember(orgId, request.auth.uid));
        
        // Admins can create/update/delete users
        allow create, update, delete: if request.auth != null 
          && isOrgAdmin(orgId, request.auth.uid);
        
        // Users can update their own profile (limited fields)
        allow update: if request.auth != null 
          && request.auth.uid == userId
          && onlyUpdatingAllowedFields(['displayName', 'profile', 'lastLoginAt']);
      }
      
      // PRODUCTS subcollection  
      match /products/{productId} {
        // All active org members can read products
        allow read: if request.auth != null 
          && isActiveOrgMember(orgId, request.auth.uid);
        
        // Users with product permissions can manage products
        allow create, update: if request.auth != null 
          && isActiveOrgMember(orgId, request.auth.uid)
          && hasProductPermission(orgId, request.auth.uid);
        
        // Only admins can delete products (soft delete preferred)
        allow delete: if request.auth != null 
          && isOrgAdmin(orgId, request.auth.uid);
      }
      
      // ASSIGNMENTS (Sales) subcollection
      match /assignments/{assignmentId} {
        // All active org members can read assignments
        allow read: if request.auth != null 
          && isActiveOrgMember(orgId, request.auth.uid);
        
        // Active members can create assignments (sales)
        allow create: if request.auth != null 
          && isActiveOrgMember(orgId, request.auth.uid)
          && request.auth.uid == resource.data.createdBy;
        
        // Users can update assignments they created, or admins can update any
        allow update: if request.auth != null 
          && isActiveOrgMember(orgId, request.auth.uid)
          && (request.auth.uid == resource.data.createdBy || isOrgAdmin(orgId, request.auth.uid));
        
        // Only admins can delete assignments
        allow delete: if request.auth != null 
          && isOrgAdmin(orgId, request.auth.uid);
      }
      
      // DAILY REPORTS subcollection
      match /dailyReports/{reportId} {
        // All active org members can read reports
        allow read: if request.auth != null 
          && isActiveOrgMember(orgId, request.auth.uid);
        
        // Active members can create reports
        allow create: if request.auth != null 
          && isActiveOrgMember(orgId, request.auth.uid)
          && request.auth.uid == resource.data.generatedBy;
        
        // Report creators and admins can update reports
        allow update: if request.auth != null 
          && isActiveOrgMember(orgId, request.auth.uid)
          && (request.auth.uid == resource.data.generatedBy || isOrgAdmin(orgId, request.auth.uid));
        
        // Only admins can delete reports
        allow delete: if request.auth != null 
          && isOrgAdmin(orgId, request.auth.uid);
      }
      
      // SETTINGS subcollection
      match /settings/{settingId} {
        // All active org members can read settings
        allow read: if request.auth != null 
          && isActiveOrgMember(orgId, request.auth.uid);
        
        // Only admins can modify settings
        allow create, update, delete: if request.auth != null 
          && isOrgAdmin(orgId, request.auth.uid);
      }
    }

    // ============================================
    // HELPER FUNCTIONS
    // ============================================
    
    // Check if user is an admin of the organization
    function isOrgAdmin(orgId, uid) {
      return uid != null && 
        uid in get(/databases/$(database)/documents/organizations/$(orgId)).data.adminUsers;
    }
    
    // Check if user is a member of the organization
    function isOrgMember(orgId, uid) {
      return uid != null && 
        exists(/databases/$(database)/documents/organizations/$(orgId)/users/$(uid));
    }
    
    // Check if user is an active member of the organization
    function isActiveOrgMember(orgId, uid) {
      return uid != null && 
        exists(/databases/$(database)/documents/organizations/$(orgId)/users/$(uid)) &&
        get(/databases/$(database)/documents/organizations/$(orgId)/users/$(uid)).data.isActive == true;
    }
    
    // Check if user has product management permissions
    function hasProductPermission(orgId, uid) {
      let userData = get(/databases/$(database)/documents/organizations/$(orgId)/users/$(uid)).data;
      return userData.permissions.canManageProducts == true || 
             userData.role == 'admin';
    }
    
    // Helper to check if only allowed fields are being updated
    function onlyUpdatingAllowedFields(allowedFields) {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedFields);
    }
    
    // ============================================
    // DEVELOPMENT/TESTING RULES (Remove in production)
    // ============================================
    
    // Allow authenticated users to create their first organization
    // This is for initial setup - tighten this in production
    match /organizations/{orgId} {
      allow create: if request.auth != null;
    }
  }
}